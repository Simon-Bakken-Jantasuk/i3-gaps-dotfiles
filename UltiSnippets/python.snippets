#Import
snippet pylab "imports pylab" bA
from pylab import *
endsnippet

snippet sympy "imports pylab" bA
from sympy import *
endsnippet

snippet note "imports" bA
from pylab import *
from sympy import *
endsnippet

#Generell
snippet fun "defines function" bA
def ${1:function_name}(${2:parameter}):
	$0
endsnippet

snippet pt "print function" bA
print($1)
endsnippet

snippet sr "squared" i 
**2
endsnippet

snippet cb "cubed" i
**3 
endsnippet

snippet if "if statement" bA
if ($1):
	$0
endsnippet

snippet wl "while loop" bA
while ($1 < $2):
	$0
endsnippet

snippet wle "while less-equal" i
while ($1 <= $2):
	$0
endsnippet

snippet wge "while greater-equal" i
while ($1 >= $2):
	$0
endsnippet

snippet wg "while greater" bA
while ($1 > $2):
	$0
endsnippet

snippet for2s "for in range" bA
for i in range(${1:start},${2:stop})
	$0
endsnippet

snippet for3s "for in range with step" bA
for i in range(${1:start},${2:stop}, ${3:step})
	$0
endsnippet

snippet app "append" bA
${1:array}.append($2)
endsnippet

#Pylab

snippet plot "plot" bA 
plot(${1:axes})
endsnippet

snippet xlab "xlabel" bA
xlabel(${1:string})
endsnippet

snippet ylab "ylabel" bA
ylabel(${1:string})
endsnippet

snippet title "makes a title" bA
title(${1:string})
endsnippet

snippet show "show graph" bA
show()
endsnippet

snippet plf "plots function" bA 
plt.plot(x, ${1:function_name}, label="$1"
endsnippet

snippet line "linspace" iA 
linspace(${1:start},${2:end},${3:sample})
endsnippet

#Formeler,algoritmer og snippets
snippet frac "fraction,rational" i 
Rational($1,$2)
endsnippet

snippet sqrt "squareroot" i 
sqrt($1)
endsnippet

snippet sym "symbol" bA
${1:symbol} = Symbol("$1")
endsnippet

snippet int "integrates" i 
integrate(${1:function},${2:variabe})
endsnippet

snippet der "derivative" i 
diff(${1:function},${2:variable})
endsnippet

snippet solve "solve" i 
solve(${1:function},${2:variable})
endsnippet
snippet exp "exp" i
exp($1)
endsnippet


snippet rektangelmetoden "rektangelmetode" bA
a = ${1:nedre_grense}
b = ${2:Ã¸vre_grense}

n = ${3:antall_rektangler}

def ${4:funksjon_navn}(x):
	return $5

def rektangelSum(n):
	areal = 0
	bredde = (b - a) / n

	for i in range(n):
		hoyde = ${4:funksjon_navn}(a + i * bredde)
		areal = areal + hoyde * bredde
	return areal

print("Rektangelsummen: ", rektangelSum(n)
endsnippet



